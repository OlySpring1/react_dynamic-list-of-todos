{"version":3,"sources":["helpers/api.ts","TodoCard.tsx","TodoList.tsx","ButtonsSort.tsx","Loading.tsx","App.tsx","index.tsx"],"names":["getTodos","a","fetch","response","json","dataTodos","getUsers","dataUsers","getPrepareTodos","Promise","all","todos","users","prepareTodos","map","todo","userId","find","user","id","TodoCard","title","completed","className","classNames","name","TodoList","key","buttonsSort","ButtonsSort","setSortField","item","type","onClick","e","target","hendleOnClick","Loading","loaded","App","useState","isToggle","setIsToggle","setTodos","setLoaded","sortField","visibleTodos","sort","b","localeCompare","then","todosFromServe","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3784e9e2.chunk.js","sourcesContent":["const API_URL_TODOS = 'https://jsonplaceholder.typicode.com/todos';\nconst API_URL_USER = 'https://jsonplaceholder.typicode.com/users';\n\nexport const getTodos = async () => {\n  const response = await fetch(API_URL_TODOS);\n  const dataTodos = await response.json();\n\n  return dataTodos;\n};\n\nexport const getUsers = async () => {\n  const response = await fetch(API_URL_USER);\n  const dataUsers = await response.json();\n\n  return dataUsers;\n};\n\nexport const getPrepareTodos = async () => {\n  const [todos, users] = await Promise.all([getTodos(), getUsers()]);\n  const prepareTodos = todos.map((todo: Todo) => ({\n    ...todo,\n    userId: { ...users.find((user: User) => user.id === todo.userId) },\n  }));\n\n  return prepareTodos;\n};\n","import React from 'react';\nimport classNames from 'classnames/bind';\n\ntype Props = {\n  id: number;\n  title: string;\n  completed: boolean;\n  userId: User;\n};\n\nconst TodoCard: React.FC<Props> = ({\n  id, title, completed, userId,\n}) => {\n  return (\n    <tr className={\n      classNames({ 'has-background-success': !completed },\n        { 'has-background-info': completed })\n    }\n    >\n      <th>{id}</th>\n      <td>{title}</td>\n      <td>{completed ? 'completed' : 'active'}</td>\n      <td>{userId.name}</td>\n    </tr>\n  );\n};\n\n\nexport default TodoCard;\n","import React from 'react';\nimport TodoCard from './TodoCard';\n\ntype Props = {\n  todos: PrepareTodo[];\n};\n\nconst TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <>\n      {todos.map((todo: PrepareTodo) => (\n        <TodoCard key={todo.id} {...todo} />\n      ))}\n    </>\n  );\n};\n\nexport default TodoList;\n","import React, { MouseEvent } from 'react';\n\nconst buttonsSort = ['id', 'title', 'completed', 'name'];\n\ntype Props = {\n  setSortField: (sortField: string) => void;\n};\n\nconst ButtonsSort: React.FC<Props> = ({ setSortField }) => {\n  const hendleOnClick = (e: MouseEvent<HTMLButtonElement>) => {\n    const { name } = (e.target as HTMLButtonElement);\n    setSortField(name);\n  };\n\n  return (\n    <tr>\n      {buttonsSort.map(item => (\n        <th>\n          <button\n            type=\"button\"\n            name={item}\n            className=\"btnSort\"\n            onClick={e => hendleOnClick(e)}\n          >\n            By\n            {' '}\n            {item}\n          </button>\n        </th>\n      ))}\n    </tr>\n  );\n};\n\nexport default ButtonsSort;\n","import React from 'react';\nimport classNames from 'classnames/bind';\n\ntype Props = {\n  loaded: boolean;\n};\n\nconst Loading: React.FC<Props> = ({ loaded }) => (\n  <div className={classNames({ 'lds-roller': !loaded }, { 'has-background-success': loaded })}>\n    <div />\n    <div />\n    <div />\n    <div />\n    <div />\n    <div />\n    <div />\n    <div />\n  </div>\n);\n\nexport default Loading;\n","import React, { useState } from 'react';\nimport { getPrepareTodos } from './helpers/api';\nimport './App.css';\nimport TodoList from './TodoList';\nimport ButtonsSort from './ButtonsSort';\nimport Loading from './Loading';\n\nconst App: React.FC = () => {\n  const [isToggle, setIsToggle] = useState(false);\n  const [todos, setTodos] = useState<PrepareTodo[]>([]);\n  const [loaded, setLoaded] = useState<boolean>(false);\n  const [sortField, setSortField] = useState<string>('id');\n  const visibleTodos = [...todos];\n\n  const loadTodos = () => {\n    setIsToggle(!isToggle);\n    getPrepareTodos()\n      .then(todosFromServe => {\n        setTodos(todosFromServe);\n        setLoaded(true);\n      });\n  };\n\n  switch (sortField) {\n    case 'completed':\n      visibleTodos.sort(\n        (a, b) => +a[sortField] - +b[sortField],\n      );\n      break;\n\n    case 'title':\n      visibleTodos.sort(\n        (a, b) => a[sortField].localeCompare(b[sortField]),\n      );\n      break;\n\n    case 'name':\n      visibleTodos.sort(\n        (a, b) => a.userId[sortField].localeCompare(b.userId[sortField]),\n      );\n      break;\n\n    default:\n      visibleTodos.sort(\n        (a, b) => a.id - b.id,\n      );\n  }\n\n  return (\n    <div className=\"container\">\n      <h1 className=\"title is-1\">Dynamic list of TODOs</h1>\n      {!isToggle\n        ? (\n          <button\n            type=\"button\"\n            className=\"button is-primary is-medium\"\n            onClick={loadTodos}\n          >\n            Load\n          </button>\n        )\n        : (\n          <Loading loaded={loaded} />\n        )}\n\n      {loaded && (\n        <div className=\"bd-snippet-preview \">\n          <table className=\"table is-striped is-hoverable\">\n            <thead className=\"has-background-grey-lighter\">\n              <ButtonsSort\n                setSortField={setSortField}\n              />\n            </thead>\n            <tfoot className=\"has-background-grey-lighter\">\n              <ButtonsSort\n                setSortField={setSortField}\n              />\n            </tfoot>\n            <tbody>\n              <TodoList todos={visibleTodos} />\n            </tbody>\n          </table>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}